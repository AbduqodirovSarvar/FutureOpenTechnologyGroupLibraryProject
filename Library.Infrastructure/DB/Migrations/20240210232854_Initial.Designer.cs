// <auto-generated />
using System;
using Library.Infrastructure.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240210232854_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.15");

            modelBuilder.Entity("Library.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ApartmentNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Block")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("HomeNumber")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RegionId", "Block", "Street", "HomeNumber", "ApartmentNumber")
                        .IsUnique();

                    b.ToTable("Addresss");
                });

            modelBuilder.Entity("Library.Domain.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Biography")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Library.Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PublisherId");

                    b.HasIndex("GenreId", "Title")
                        .IsUnique();

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Library.Domain.Entities.BookAuthor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BookId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("AuthorId", "BookId")
                        .IsUnique();

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("Library.Domain.Entities.BorrowingRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BookId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Deadline")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FineForBooks")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("StudentId", "BookId", "Deadline")
                        .IsUnique();

                    b.ToTable("BorrowingRecords");
                });

            modelBuilder.Entity("Library.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CountryId", "Name")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Library.Domain.Entities.ContactInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PublisherId", "Name")
                        .IsUnique();

                    b.ToTable("ContactInformations");
                });

            modelBuilder.Entity("Library.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Library.Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Library.Domain.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("Library.Domain.Entities.PublisherAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CreatedById");

                    b.HasIndex("PublisherId", "AddressId")
                        .IsUnique();

                    b.ToTable("PublisherAddresses");
                });

            modelBuilder.Entity("Library.Domain.Entities.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CityId", "Name")
                        .IsUnique();

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Library.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Library.Domain.Entities.StudentAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CreatedById");

                    b.HasIndex("StudentId", "AddressId")
                        .IsUnique();

                    b.ToTable("StudentAddresses");
                });

            modelBuilder.Entity("Library.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("657eae54-8252-428c-8fda-0392dd35ba1a"),
                            CreatedTime = new DateTime(2024, 2, 10, 23, 28, 54, 431, DateTimeKind.Utc).AddTicks(745),
                            Email = "superadmin@gmail.com",
                            FullName = "SuperAdmin",
                            Login = "superadmin",
                            PasswordHash = "+X7sOjCTL80q4oUmaEKJI5yYsgRfeOX+fSolc71M0ebHs8VH8o1FJB9CDyUEOj1Vc8LkqoCpw02ihR5MsDOIdQ==",
                            Role = 2
                        });
                });

            modelBuilder.Entity("Library.Domain.Entities.Address", b =>
                {
                    b.HasOne("Library.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Library.Domain.Entities.Region", "Region")
                        .WithMany("Addresses")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Domain.Entities.Author", b =>
                {
                    b.HasOne("Library.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Domain.Entities.Book", b =>
                {
                    b.HasOne("Library.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Library.Domain.Entities.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Publisher");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Domain.Entities.BookAuthor", b =>
                {
                    b.HasOne("Library.Domain.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Entities.Book", "Book")
                        .WithMany("Authors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("Author");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Domain.Entities.BorrowingRecord", b =>
                {
                    b.HasOne("Library.Domain.Entities.Book", "Book")
                        .WithMany("BorrowingRecords")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Library.Domain.Entities.Student", "Student")
                        .WithMany("BorrowingRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Student");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Domain.Entities.City", b =>
                {
                    b.HasOne("Library.Domain.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Domain.Entities.ContactInformation", b =>
                {
                    b.HasOne("Library.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Library.Domain.Entities.Publisher", "Publisher")
                        .WithMany("Contacts")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Domain.Entities.Country", b =>
                {
                    b.HasOne("Library.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Domain.Entities.Genre", b =>
                {
                    b.HasOne("Library.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Domain.Entities.Publisher", b =>
                {
                    b.HasOne("Library.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Domain.Entities.PublisherAddress", b =>
                {
                    b.HasOne("Library.Domain.Entities.Address", "Address")
                        .WithOne("Publisher")
                        .HasForeignKey("Library.Domain.Entities.PublisherAddress", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Library.Domain.Entities.Publisher", "Publisher")
                        .WithMany("Addresses")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Publisher");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Domain.Entities.Region", b =>
                {
                    b.HasOne("Library.Domain.Entities.City", "City")
                        .WithMany("Regions")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Domain.Entities.Student", b =>
                {
                    b.HasOne("Library.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Domain.Entities.StudentAddress", b =>
                {
                    b.HasOne("Library.Domain.Entities.Address", "Address")
                        .WithOne("Student")
                        .HasForeignKey("Library.Domain.Entities.StudentAddress", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Library.Domain.Entities.Student", "Student")
                        .WithMany("StudentAddresses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Student");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Domain.Entities.User", b =>
                {
                    b.HasOne("Library.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Domain.Entities.Address", b =>
                {
                    b.Navigation("Publisher");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Library.Domain.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Library.Domain.Entities.Book", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("BorrowingRecords");
                });

            modelBuilder.Entity("Library.Domain.Entities.City", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Library.Domain.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Library.Domain.Entities.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Library.Domain.Entities.Publisher", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Books");

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Library.Domain.Entities.Region", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Library.Domain.Entities.Student", b =>
                {
                    b.Navigation("BorrowingRecords");

                    b.Navigation("StudentAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
